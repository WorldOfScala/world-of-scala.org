import com.typesafe.sbt.packager.archetypes.JavaAppPackaging
import com.typesafe.sbt.packager.archetypes.scripts.AshScriptPlugin
import com.typesafe.sbt.packager.docker.DockerPlugin
import com.typesafe.sbt.SbtNativePackager.autoImport._
import com.typesafe.sbt.web._
import com.typesafe.sbt.web.Import._

import java.nio.charset.StandardCharsets
import java.nio.file.Files

import org.scalajs.sbtplugin.ScalaJSPlugin.autoImport._
import org.scalajs.sbtplugin._

import play.twirl.sbt.SbtTwirl

import sbt._
import sbt.Keys._

import scalajsbundler.sbtplugin._
import scalajsbundler.sbtplugin.WebScalaJSBundlerPlugin
import scalajsbundler.sbtplugin.ScalaJSBundlerPlugin.autoImport._

import webscalajs.WebScalaJS.autoImport._

object DeploymentSettings {
//
// Define the build mode:
// - CommonJs: production mode, aka with BFF and webjar deployment
//         optimized, CommonJSModule
//         webjar packaging
// - ESModule: demo mode (default)
//         optimized, CommonJSModule
//         static files
// - dev:  development mode
//         no optimization, ESModule
//         static files, hot reload with vite.
//
// Default is "demo" mode, because the vite build does not take parameters.
//   (see vite.config.js)
  val mode = sys.env.get("MOD").getOrElse("ESModule")

  val overrideDockerRegistry = sys.env.get("LOCAL_DOCKER_REGISTRY").isDefined

  val publicFolder = "public"

//
// On dev mode, server will only serve API and static files.
//

  def serverSettings(clientProjects: Project*) = mode match {
    case "ESModule" => dockerSettings
    case _          => Seq()
  }

  def staticGenerationSettings(client: Project) = mode match {
    case "ESModule" =>
      Seq(
        (Compile / resourceGenerators) += Def
          .taskDyn[Seq[File]] {
            val rootFolder = (Compile / resourceManaged).value / publicFolder
            rootFolder.mkdirs()

            Def.task {
              if (
                scala.sys.process
                  .Process(
                    List("npm", "run", "build", "--", "--emptyOutDir", "--outDir", rootFolder.getAbsolutePath),
                    (client / baseDirectory).value
                  )
                  .! == 0
              ) {
                println(s"Generated static files in ${rootFolder}")
                (rootFolder ** "*.*").get
              } else {
                println(s"Failed to generate static files in ${rootFolder}")
                throw new IllegalStateException("Vite build failed")
              }

            }

          }
          .taskValue
      )
    case _ =>
      Seq()
  }

  def nexusNpmSettings =
    sys.env
      .get("NEXUS")
      .map(url =>
        npmExtraArgs ++= Seq(
          s"--registry=$url/repository/npm-public/"
        )
      )
      .toSeq

  def insureBuildEnvFile(baseDirectory: File, scalaVersion: String) = {

    val outputFile = baseDirectory / "scripts" / "target" / "build-env.sh"

    val mainJSFile = "modules/client/target/scala-$SCALA_VERSION/client-fastopt/main.js"
    lazy val buildFileContent = s"""
                                   |#!/bin/usr/env bash
                                   |
                                   |# This file is generated by build.sbt
                                   |#- On ${java.time.Instant.now}
                                   |# Do not edit it manually
                                   |
                                   |SCALA_VERSION="$scalaVersion"
                                   |MAIN_JS_FILE=$mainJSFile
                                   |""".stripMargin.split("\n").toList
    def writeBuildEnvFile(): Unit =
      IO.writeLines(
        outputFile,
        buildFileContent,
        StandardCharsets.UTF_8
      )

    if (
      outputFile.exists() && buildFileContent
        .filterNot(_.startsWith("#-")) == IO.readLines(outputFile, StandardCharsets.UTF_8).filterNot(_.startsWith("#-"))
    ) {
      println("build-env.sh file is up to date")
    } else {
      writeBuildEnvFile()
    }

  }

  lazy val dockerSettings = {
    import DockerPlugin.autoImport._
    import DockerPlugin.globalSettings._
    import sbt.Keys._
    Seq(
      Docker / maintainer     := "Joh doe",
      Docker / dockerUsername := Some("cheleb"),
      Docker / packageName    := "world-of-scala",
      dockerBaseImage         := "azul/zulu-openjdk-alpine:23-latest",
      dockerUpdateLatest      := true,
      dockerExposedPorts      := Seq(8000)
    ) ++ (overrideDockerRegistry match {
      case true =>
        Seq(
          Docker / dockerRepository := Some("registry.orb.local"),
          Docker / dockerUsername   := Some("world-of-scala")
        )
      case false =>
        Seq()
    })
  }

}
